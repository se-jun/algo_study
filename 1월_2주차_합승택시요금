class Solution {
    int[][] map;
    int answer = 999999999;
    public int solution(int n, int s, int a, int b, int[][] fares) {
        map = new int[n][n];

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                map[i][j] = 20000000;
            }
            map[i][i] = 0;
        }

        for(int i=0; i< fares.length; i++) {
            map[fares[i][0]-1][fares[i][1]-1] = fares[i][2];
            map[fares[i][1]-1][fares[i][0]-1] = fares[i][2];
        }
        floyd(n, map);

        for(int i=0; i<n; i++) {
            int current = map[s-1][i] + map[i][a-1] + map[i][b-1];

            if(answer >= current ) {
                answer = current;
            }
        }
        return answer;
    }

    public static void floyd(int n, int[][] dist) {
        for(int k = 0; k < n; k++) {
            for(int i=0; i < n; i++) {
                if(i==k) continue;
                for(int j=0; j < n; j++) {
                    if(j==k || i==j) continue;
                    dist[i][j] = Math.min(dist[i][k] + dist[k][j], dist[i][j]);
                }
            }
        }
    }
}